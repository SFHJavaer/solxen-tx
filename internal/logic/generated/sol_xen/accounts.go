// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package sol_xen

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
)

type UserXnRecord struct {
	Points ag_binary.Uint128
}

var UserXnRecordDiscriminator = [8]byte{49, 253, 198, 222, 235, 109, 119, 115}

func (obj UserXnRecord) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(UserXnRecordDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Points` param:
	err = encoder.Encode(obj.Points)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UserXnRecord) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(UserXnRecordDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[49 253 198 222 235 109 119 115]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Points`:
	err = decoder.Decode(&obj.Points)
	if err != nil {
		return err
	}
	return nil
}

type GlobalXnRecord struct {
	Amp         uint16
	LastAmpSlot uint64
	Points      ag_binary.Uint128
	Hashes      uint32
	Superhashes uint32
	Txs         uint32
}

var GlobalXnRecordDiscriminator = [8]byte{29, 48, 183, 205, 201, 7, 241, 7}

func (obj GlobalXnRecord) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(GlobalXnRecordDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Amp` param:
	err = encoder.Encode(obj.Amp)
	if err != nil {
		return err
	}
	// Serialize `LastAmpSlot` param:
	err = encoder.Encode(obj.LastAmpSlot)
	if err != nil {
		return err
	}
	// Serialize `Points` param:
	err = encoder.Encode(obj.Points)
	if err != nil {
		return err
	}
	// Serialize `Hashes` param:
	err = encoder.Encode(obj.Hashes)
	if err != nil {
		return err
	}
	// Serialize `Superhashes` param:
	err = encoder.Encode(obj.Superhashes)
	if err != nil {
		return err
	}
	// Serialize `Txs` param:
	err = encoder.Encode(obj.Txs)
	if err != nil {
		return err
	}
	return nil
}

func (obj *GlobalXnRecord) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(GlobalXnRecordDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[29 48 183 205 201 7 241 7]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Amp`:
	err = decoder.Decode(&obj.Amp)
	if err != nil {
		return err
	}
	// Deserialize `LastAmpSlot`:
	err = decoder.Decode(&obj.LastAmpSlot)
	if err != nil {
		return err
	}
	// Deserialize `Points`:
	err = decoder.Decode(&obj.Points)
	if err != nil {
		return err
	}
	// Deserialize `Hashes`:
	err = decoder.Decode(&obj.Hashes)
	if err != nil {
		return err
	}
	// Deserialize `Superhashes`:
	err = decoder.Decode(&obj.Superhashes)
	if err != nil {
		return err
	}
	// Deserialize `Txs`:
	err = decoder.Decode(&obj.Txs)
	if err != nil {
		return err
	}
	return nil
}
