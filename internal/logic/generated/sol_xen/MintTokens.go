// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package sol_xen

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// MintTokens is the `mintTokens` instruction.
type MintTokens struct {
	EthAccount *EthAccount

	// [0] = [WRITE] userTokenAccount
	//
	// [1] = [WRITE] globalXnRecord
	//
	// [2] = [WRITE] userXnRecord
	//
	// [3] = [WRITE, SIGNER] user
	//
	// [4] = [WRITE] mintAccount
	//
	// [5] = [] tokenProgram
	//
	// [6] = [] systemProgram
	//
	// [7] = [] associatedTokenProgram
	//
	// [8] = [] rent
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewMintTokensInstructionBuilder creates a new `MintTokens` instruction builder.
func NewMintTokensInstructionBuilder() *MintTokens {
	nd := &MintTokens{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 9),
	}
	return nd
}

// SetEthAccount sets the "ethAccount" parameter.
func (inst *MintTokens) SetEthAccount(ethAccount EthAccount) *MintTokens {
	inst.EthAccount = &ethAccount
	return inst
}

// SetUserTokenAccountAccount sets the "userTokenAccount" account.
func (inst *MintTokens) SetUserTokenAccountAccount(userTokenAccount ag_solanago.PublicKey) *MintTokens {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(userTokenAccount).WRITE()
	return inst
}

// GetUserTokenAccountAccount gets the "userTokenAccount" account.
func (inst *MintTokens) GetUserTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetGlobalXnRecordAccount sets the "globalXnRecord" account.
func (inst *MintTokens) SetGlobalXnRecordAccount(globalXnRecord ag_solanago.PublicKey) *MintTokens {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(globalXnRecord).WRITE()
	return inst
}

// GetGlobalXnRecordAccount gets the "globalXnRecord" account.
func (inst *MintTokens) GetGlobalXnRecordAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetUserXnRecordAccount sets the "userXnRecord" account.
func (inst *MintTokens) SetUserXnRecordAccount(userXnRecord ag_solanago.PublicKey) *MintTokens {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(userXnRecord).WRITE()
	return inst
}

// GetUserXnRecordAccount gets the "userXnRecord" account.
func (inst *MintTokens) GetUserXnRecordAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetUserAccount sets the "user" account.
func (inst *MintTokens) SetUserAccount(user ag_solanago.PublicKey) *MintTokens {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(user).WRITE().SIGNER()
	return inst
}

// GetUserAccount gets the "user" account.
func (inst *MintTokens) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetMintAccountAccount sets the "mintAccount" account.
func (inst *MintTokens) SetMintAccountAccount(mintAccount ag_solanago.PublicKey) *MintTokens {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(mintAccount).WRITE()
	return inst
}

// GetMintAccountAccount gets the "mintAccount" account.
func (inst *MintTokens) GetMintAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *MintTokens) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *MintTokens {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *MintTokens) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *MintTokens) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *MintTokens {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *MintTokens) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetAssociatedTokenProgramAccount sets the "associatedTokenProgram" account.
func (inst *MintTokens) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *MintTokens {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associatedTokenProgram" account.
func (inst *MintTokens) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetRentAccount sets the "rent" account.
func (inst *MintTokens) SetRentAccount(rent ag_solanago.PublicKey) *MintTokens {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *MintTokens) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

func (inst MintTokens) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_MintTokens,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst MintTokens) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *MintTokens) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.EthAccount == nil {
			return errors.New("EthAccount parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.UserTokenAccount is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.GlobalXnRecord is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.UserXnRecord is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.MintAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Rent is not set")
		}
	}
	return nil
}

func (inst *MintTokens) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("MintTokens")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("EthAccount", *inst.EthAccount))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=9]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("             userToken", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("        globalXnRecord", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("          userXnRecord", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                  user", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                  mint", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("          tokenProgram", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("         systemProgram", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("associatedTokenProgram", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("                  rent", inst.AccountMetaSlice.Get(8)))
					})
				})
		})
}

func (obj MintTokens) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `EthAccount` param:
	err = encoder.Encode(obj.EthAccount)
	if err != nil {
		return err
	}
	return nil
}
func (obj *MintTokens) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `EthAccount`:
	err = decoder.Decode(&obj.EthAccount)
	if err != nil {
		return err
	}
	return nil
}

// NewMintTokensInstruction declares a new MintTokens instruction with the provided parameters and accounts.
func NewMintTokensInstruction(
	// Parameters:
	ethAccount EthAccount,
	// Accounts:
	userTokenAccount ag_solanago.PublicKey,
	globalXnRecord ag_solanago.PublicKey,
	userXnRecord ag_solanago.PublicKey,
	user ag_solanago.PublicKey,
	mintAccount ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey) *MintTokens {
	return NewMintTokensInstructionBuilder().
		SetEthAccount(ethAccount).
		SetUserTokenAccountAccount(userTokenAccount).
		SetGlobalXnRecordAccount(globalXnRecord).
		SetUserXnRecordAccount(userXnRecord).
		SetUserAccount(user).
		SetMintAccountAccount(mintAccount).
		SetTokenProgramAccount(tokenProgram).
		SetSystemProgramAccount(systemProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetRentAccount(rent)
}
